-- DROP STORED PROCEDURES
IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID('{databaseOwner}{objectQualifier}helferlein_BabelFish_CopyQualifier') AND type in (N'P', N'PC'))
   DROP PROCEDURE {databaseOwner}{objectQualifier}helferlein_BabelFish_CopyQualifier
GO

IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID('{databaseOwner}{objectQualifier}helferlein_BabelFish_CopyQualifierByLocale') AND type in (N'P', N'PC'))
   DROP PROCEDURE {databaseOwner}{objectQualifier}helferlein_BabelFish_CopyQualifierByLocale
GO

IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID('{databaseOwner}{objectQualifier}helferlein_BabelFish_DeleteLocale') AND type in (N'P', N'PC'))
   DROP PROCEDURE {databaseOwner}{objectQualifier}helferlein_BabelFish_DeleteLocale
GO

IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID('{databaseOwner}{objectQualifier}helferlein_BabelFish_DeleteQualifier') AND type in (N'P', N'PC'))
   DROP PROCEDURE {databaseOwner}{objectQualifier}helferlein_BabelFish_DeleteQualifier
GO

IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID('{databaseOwner}{objectQualifier}helferlein_BabelFish_DeleteString') AND type in (N'P', N'PC'))
   DROP PROCEDURE {databaseOwner}{objectQualifier}helferlein_BabelFish_DeleteString
GO

IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID('{databaseOwner}{objectQualifier}helferlein_BabelFish_DeleteStringKey') AND type in (N'P', N'PC'))
   DROP PROCEDURE {databaseOwner}{objectQualifier}helferlein_BabelFish_DeleteStringKey
GO

IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID('{databaseOwner}{objectQualifier}helferlein_BabelFish_DeleteStringKeyByLocale') AND type in (N'P', N'PC'))
   DROP PROCEDURE {databaseOwner}{objectQualifier}helferlein_BabelFish_DeleteStringKeyByLocale
GO

IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID('{databaseOwner}{objectQualifier}helferlein_BabelFish_DeletePortal') AND type in (N'P', N'PC'))
   DROP PROCEDURE {databaseOwner}{objectQualifier}helferlein_BabelFish_DeletePortal
GO

IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID('{databaseOwner}{objectQualifier}helferlein_BabelFish_GetNonFallBackStrings') AND type in (N'P', N'PC'))
   DROP PROCEDURE {databaseOwner}{objectQualifier}helferlein_BabelFish_GetNonFallBackStrings
GO

IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID('{databaseOwner}{objectQualifier}helferlein_BabelFish_GetQualifiers') AND type in (N'P', N'PC'))
   DROP PROCEDURE {databaseOwner}{objectQualifier}helferlein_BabelFish_GetQualifiers
GO

IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID('{databaseOwner}{objectQualifier}helferlein_BabelFish_GetString') AND type in (N'P', N'PC'))
   DROP PROCEDURE {databaseOwner}{objectQualifier}helferlein_BabelFish_GetString
GO

IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID('{databaseOwner}{objectQualifier}helferlein_BabelFish_GetStringById') AND type in (N'P', N'PC'))
   DROP PROCEDURE {databaseOwner}{objectQualifier}helferlein_BabelFish_GetStringById
GO

IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID('{databaseOwner}{objectQualifier}helferlein_BabelFish_GetStrings') AND type in (N'P', N'PC'))
   DROP PROCEDURE {databaseOwner}{objectQualifier}helferlein_BabelFish_GetStrings
GO

IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID('{databaseOwner}{objectQualifier}helferlein_BabelFish_GetStringsByQualifier') AND type in (N'P', N'PC'))
   DROP PROCEDURE {databaseOwner}{objectQualifier}helferlein_BabelFish_GetStringsByQualifier
GO

IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID('{databaseOwner}{objectQualifier}helferlein_BabelFish_GetStringsByQualifierAndStringKey') AND type in (N'P', N'PC'))
   DROP PROCEDURE {databaseOwner}{objectQualifier}helferlein_BabelFish_GetStringsByQualifierAndStringKey
GO

IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID('{databaseOwner}{objectQualifier}helferlein_BabelFish_InsertString') AND type in (N'P', N'PC'))
   DROP PROCEDURE {databaseOwner}{objectQualifier}helferlein_BabelFish_InsertString
GO

IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID('{databaseOwner}{objectQualifier}helferlein_BabelFish_UpdateString') AND type in (N'P', N'PC'))
   DROP PROCEDURE {databaseOwner}{objectQualifier}helferlein_BabelFish_UpdateString
GO

IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID('{databaseOwner}{objectQualifier}helferlein_BabelFish_UpdateStringById') AND type in (N'P', N'PC'))
   DROP PROCEDURE {databaseOwner}{objectQualifier}helferlein_BabelFish_UpdateStringById
GO

IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID('{databaseOwner}{objectQualifier}helferlein_BabelFish_UpdateStrings') AND type in (N'P', N'PC'))
   DROP PROCEDURE {databaseOwner}{objectQualifier}helferlein_BabelFish_UpdateStrings
GO

-- DROP TABLE
IF EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}FK_{objectQualifier}helferlein_BabelFish_{objectQualifier}Portals') AND parent_object_id = OBJECT_ID('{databaseOwner}{objectQualifier}helferlein_BabelFish'))
   ALTER TABLE {databaseOwner}{objectQualifier}helferlein_BabelFish DROP CONSTRAINT FK_{objectQualifier}helferlein_BabelFish_{objectQualifier}Portals
GO

IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID('{databaseOwner}{objectQualifier}helferlein_BabelFish') AND type in (N'U'))
   DROP TABLE {databaseOwner}{objectQualifier}helferlein_BabelFish
GO

-- CREATE TABLE
CREATE TABLE {databaseOwner}{objectQualifier}helferlein_BabelFish(
	PortalID int NOT NULL,
	ID int IDENTITY(1,1) NOT NULL,
	Locale nvarchar(5) NOT NULL,
	Qualifier nvarchar(100) NOT NULL,
	StringKey nvarchar(36) NOT NULL,
	StringText nvarchar(max) NULL,
   CONSTRAINT PK_{objectQualifier}helferlein_BabelFish PRIMARY KEY CLUSTERED(ID ASC) ON [PRIMARY]
) ON [PRIMARY]
GO

CREATE UNIQUE NONCLUSTERED INDEX UIX_{objectQualifier}helferlein_BabelFish ON {databaseOwner}{objectQualifier}helferlein_BabelFish 
(
	PortalID ASC,
	Locale ASC,
	Qualifier ASC,
	StringKey ASC
) ON [PRIMARY]
GO

ALTER TABLE {databaseOwner}{objectQualifier}helferlein_BabelFish WITH CHECK
   ADD CONSTRAINT FK_{objectQualifier}helferlein_BabelFish_{objectQualifier}Portals FOREIGN KEY(PortalID)
   REFERENCES {databaseOwner}{objectQualifier}Portals (PortalID)
   ON DELETE CASCADE
GO

ALTER TABLE {databaseOwner}{objectQualifier}helferlein_BabelFish
   CHECK CONSTRAINT FK_{objectQualifier}helferlein_BabelFish_{objectQualifier}Portals
GO

-- CREATE STORED PROCEDURES
/*
Copies all entries with a specified qualifier
from one portal to another (on the same host)

Existing values will be overwritten
*/
CREATE PROCEDURE {databaseOwner}{objectQualifier}helferlein_BabelFish_CopyQualifier
   @SourcePortalID int,
   @TargetPortalID int,
   @Qualifier nvarchar(100)
AS
   BEGIN
      DECLARE @{objectQualifier}cur_PortalID int
      DECLARE @{objectQualifier}cur_Locale nvarchar(5)
      DECLARE @{objectQualifier}cur_Qualifier nvarchar(100)
      DECLARE @{objectQualifier}cur_StringKey nvarchar(20)
      DECLARE @{objectQualifier}cur_StringText nvarchar(max)
      
      DECLARE {objectQualifier}helferlein_BabelFish_Cursor CURSOR
      FOR
         SELECT
            PortalID,
            Locale,
            Qualifier,
            StringKey,
            StringText
         FROM
            {databaseOwner}{objectQualifier}helferlein_BabelFish
         WHERE ((PortalID = @SourcePortalID) AND (Qualifier = @Qualifier))

      OPEN {objectQualifier}helferlein_BabelFish_Cursor
      FETCH NEXT FROM {objectQualifier}helferlein_BabelFish_Cursor
      INTO @{objectQualifier}cur_PortalID, @{objectQualifier}cur_Locale, @{objectQualifier}cur_Qualifier, @{objectQualifier}cur_StringKey, @{objectQualifier}cur_StringText

      WHILE @@FETCH_STATUS = 0
         BEGIN
            DECLARE @{objectQualifier}BabelFish_Counter int
            SELECT @{objectQualifier}BabelFish_Counter = COUNT(*) FROM {databaseOwner}{objectQualifier}helferlein_BabelFish WHERE ((PortalID = @TargetPortalID) AND (Locale = @{objectQualifier}cur_Locale) AND (Qualifier = @{objectQualifier}cur_Qualifier) AND (StringKey = @{objectQualifier}cur_StringKey))
            
            IF @{objectQualifier}BabelFish_Counter = 0
               BEGIN
                  INSERT INTO {databaseOwner}{objectQualifier}helferlein_BabelFish(PortalID, Locale, Qualifier, StringKey, StringText)
                  VALUES(@TargetPortalID, @{objectQualifier}cur_Locale, @{objectQualifier}cur_Qualifier, @{objectQualifier}cur_StringKey, @{objectQualifier}cur_StringText)
               END
            ELSE
               BEGIN
                  UPDATE {databaseOwner}{objectQualifier}helferlein_BabelFish SET StringText = @{objectQualifier}cur_StringText
                  WHERE((PortalID = @TargetPortalID) AND (Locale = @{objectQualifier}cur_Locale) AND (Qualifier = @{objectQualifier}cur_Qualifier) AND (StringKey = @{objectQualifier}cur_StringKey))
               END
            FETCH NEXT FROM {objectQualifier}helferlein_BabelFish_Cursor
            INTO @{objectQualifier}cur_PortalID, @{objectQualifier}cur_Locale, @{objectQualifier}cur_Qualifier, @{objectQualifier}cur_StringKey, @{objectQualifier}cur_StringText
         END
         
      CLOSE {objectQualifier}helferlein_BabelFish_Cursor
      DEALLOCATE {objectQualifier}helferlein_BabelFish_Cursor
   END
GO

/*
Copies all entries with a specified locale and a specified qualifier
from one portal to another (on the same host)

Existing values will be overwritten
*/
CREATE PROCEDURE {databaseOwner}{objectQualifier}helferlein_BabelFish_CopyQualifierByLocale
   @SourcePortalID int,
   @TargetPortalID int,
   @Locale nvarchar(5),
   @Qualifier nvarchar(100)
AS
   BEGIN
      DECLARE @{objectQualifier}cur_PortalID int
      DECLARE @{objectQualifier}cur_Qualifier nvarchar(100)
      DECLARE @{objectQualifier}cur_StringKey nvarchar(20)
      DECLARE @{objectQualifier}cur_StringText nvarchar(max)
      
      DECLARE {objectQualifier}helferlein_BabelFish_Cursor CURSOR
      FOR
         SELECT
            PortalID,
            Qualifier,
            StringKey,
            StringText
         FROM
            {databaseOwner}{objectQualifier}helferlein_BabelFish
         WHERE ((PortalID = @SourcePortalID) AND (Locale = @Locale) AND (Qualifier = @Qualifier))

         OPEN {objectQualifier}helferlein_BabelFish_Cursor
         FETCH NEXT FROM {objectQualifier}helferlein_BabelFish_Cursor
         INTO @{objectQualifier}cur_PortalID, @{objectQualifier}cur_Qualifier, @{objectQualifier}cur_StringKey, @{objectQualifier}cur_StringText

         WHILE @@FETCH_STATUS = 0
            BEGIN
               DECLARE @{objectQualifier}BabelFish_Counter int
               SELECT @{objectQualifier}BabelFish_Counter = COUNT(*) FROM {databaseOwner}{objectQualifier}helferlein_BabelFish WHERE ((PortalID = @TargetPortalID) AND (Locale = @Locale) AND (Qualifier = @{objectQualifier}cur_Qualifier) AND (StringKey = @{objectQualifier}cur_StringKey))
               
               IF @{objectQualifier}BabelFish_Counter = 0
                  BEGIN
                     INSERT INTO {databaseOwner}{objectQualifier}helferlein_BabelFish(PortalID, Locale, Qualifier, StringKey, StringText)
                     VALUES(@TargetPortalID, @Locale, @{objectQualifier}cur_Qualifier, @{objectQualifier}cur_StringKey, @{objectQualifier}cur_StringText)
                  END
               ELSE
                  BEGIN
                     UPDATE {databaseOwner}{objectQualifier}helferlein_BabelFish SET StringText = @{objectQualifier}cur_StringText
                     WHERE((PortalID = @TargetPortalID) AND (Locale = @Locale) AND (Qualifier = @{objectQualifier}cur_Qualifier) AND (StringKey = @{objectQualifier}cur_StringKey))
                  END
               FETCH NEXT FROM {objectQualifier}helferlein_BabelFish_Cursor
               INTO @{objectQualifier}cur_PortalID, @{objectQualifier}cur_Qualifier, @{objectQualifier}cur_StringKey, @{objectQualifier}cur_StringText
            END
            
         CLOSE {objectQualifier}helferlein_BabelFish_Cursor
         DEALLOCATE {objectQualifier}helferlein_BabelFish_Cursor
   END
GO

/*
Deletes all entries with a specified locale from a portal
*/
CREATE PROCEDURE {databaseOwner}{objectQualifier}helferlein_BabelFish_DeleteLocale
   @PortalID int,
   @Locale nvarchar(5)
AS
   BEGIN
      DELETE FROM
         {databaseOwner}{objectQualifier}helferlein_BabelFish
      WHERE
         ((PortalID = @PortalID) AND (Locale = @Locale))
   END
GO

/*
Deletes all entries from a portal
*/
CREATE PROCEDURE {databaseOwner}{objectQualifier}helferlein_BabelFish_DeletePortal
   @PortalID int
AS
   BEGIN
      DELETE FROM
         {databaseOwner}{objectQualifier}helferlein_BabelFish
      WHERE
         (PortalID = @PortalID)
   END
GO

/*
Deletes all entries with a specified qualifier from a portal
*/
CREATE PROCEDURE {databaseOwner}{objectQualifier}helferlein_BabelFish_DeleteQualifier
   @PortalID int,
   @Qualifier nvarchar(100)
AS
   BEGIN
      DELETE FROM
         {databaseOwner}{objectQualifier}helferlein_BabelFish
      WHERE
         ((PortalID = @PortalID) AND (Qualifier = @Qualifier))
   END
GO

/*
Deletes an entry specified by ID
*/
CREATE PROCEDURE {databaseOwner}{objectQualifier}helferlein_BabelFish_DeleteString
   @ID int
AS
   BEGIN
      DELETE FROM
         {databaseOwner}{objectQualifier}helferlein_BabelFish
      WHERE
         (ID = @ID)
   END
GO

/*
Deletes all entries specified by a qualifier and a key
*/
CREATE PROCEDURE {databaseOwner}{objectQualifier}helferlein_BabelFish_DeleteStringKey
   @PortalID int,
   @Qualifier nvarchar(100),
   @StringKey nvarchar(36)
AS
   BEGIN
      DELETE FROM
         {databaseOwner}{objectQualifier}helferlein_BabelFish
      WHERE
         ((PortalID = @PortalID) AND (Qualifier = @Qualifier) AND (StringKey = @StringKey))
   END
GO

/*
Deletes an enty specified by a locale, a qualifier and a key
*/
CREATE PROCEDURE {databaseOwner}{objectQualifier}helferlein_BabelFish_DeleteStringKeyByLocale
   @PortalID int,
   @Locale nvarchar(5),
   @Qualifier nvarchar(100),
   @StringKey nvarchar(36)
AS
   BEGIN
      DELETE FROM
         dbo.{objectQualifier}helferlein_BabelFish
      WHERE
         ((PortalID = @PortalID) AND (Locale = @Locale) AND (Qualifier = @Qualifier) AND (StringKey = @StringKey))
   END

GO

/*
Gets all non-FallBack values of a string
*/
CREATE PROCEDURE {databaseOwner}{objectQualifier}helferlein_BabelFish_GetNonFallBackStrings
	@PortalID int,
	@Qualifier nvarchar(100),
	@StringKey nvarchar(36),
	@FallBackLocale nvarchar(5)
AS
   BEGIN
	   SELECT
		  PortalID,
		  ID,
		  Locale,
		  Qualifier,
		  StringKey,
		  StringText,
		  (SELECT StringText FROM {databaseOwner}{objectQualifier}helferlein_BabelFish AS {objectQualifier}helferlein_BabelFish_FallBack WHERE(({objectQualifier}helferlein_BabelFish_FallBack.Qualifier = {objectQualifier}helferlein_BabelFish.Qualifier) AND ({objectQualifier}helferlein_BabelFish_FallBack.StringKey = {objectQualifier}helferlein_BabelFish.StringKey) AND ({objectQualifier}helferlein_BabelFish_FallBack.Locale = @FallBackLocale))) AS FallBack
	   FROM
		  {databaseOwner}{objectQualifier}helferlein_BabelFish
	   WHERE
		  ((PortalID = @PortalID) AND (Qualifier = @Qualifier) AND (StringKey = @StringKey) AND (Locale <> @FallBackLocale))
   END
GO

/*
Gets all qualifiers of a portal
*/
CREATE PROCEDURE {databaseOwner}{objectQualifier}helferlein_BabelFish_GetQualifiers
   @PortalID int
AS
   BEGIN
      SELECT
         PortalID,
         Qualifier
      FROM
         {databaseOwner}{objectQualifier}helferlein_BabelFish
      WHERE
         (PortalID = @PortalID)
      GROUP BY
         PortalID, Qualifier
   END
GO

/*
Gets a string, either
1. String found, Locale = FallBackLocale
2. String found, Locale != FallBackLocale
3. String not found, FallBack found
*/
CREATE PROCEDURE {databaseOwner}{objectQualifier}helferlein_BabelFish_GetString
   @PortalID int,
   @Locale nvarchar(5),
   @Qualifier nvarchar(100),
   @StringKey nvarchar(100),
   @FallBackLocale nvarchar(5)
AS
   BEGIN
   IF (@Locale = @FallBackLocale)
      /* -- This applies to 1. -- */
      BEGIN
         SELECT
            PortalID,
            ID,
            Locale,
            Qualifier,
            StringKey,
            StringText,
            StringText AS FallBack
         FROM
            {databaseOwner}{objectQualifier}helferlein_BabelFish
         WHERE
            ((PortalID = @PortalID) AND (Locale = @Locale) AND (Qualifier = @Qualifier) AND (StringKey = @StringKey))
      END
   ELSE
      BEGIN
         DECLARE @Count int
         SELECT @Count = COUNT(*) FROM {databaseOwner}{objectQualifier}helferlein_BabelFish WHERE ((PortalID = @PortalID) AND (Locale = @Locale) AND (Qualifier = @Qualifier) AND (StringKey = @StringKey))
         IF @Count > 0
            /* -- This applies to 2. -- */
            BEGIN
               SELECT
                  PortalID,
                  ID,
                  Locale,
                  Qualifier,
                  StringKey,
                  StringText,
                  (SELECT StringText FROM {databaseOwner}{objectQualifier}helferlein_BabelFish AS {objectQualifier}helferlein_BabelFish_FallBack WHERE (({objectQualifier}helferlein_BabelFish_FallBack.PortalID = {objectQualifier}helferlein_BabelFish.PortalID) AND ({objectQualifier}helferlein_BabelFish_FallBack.Locale = @FallBackLocale) AND ({objectQualifier}helferlein_BabelFish_FallBack.Qualifier = {objectQualifier}helferlein_BabelFish.Qualifier) AND ({objectQualifier}helferlein_BabelFish_FallBack.StringKey = {objectQualifier}helferlein_BabelFish.StringKey))) AS FallBack
               FROM
                  {databaseOwner}{objectQualifier}helferlein_BabelFish
               WHERE
                  ((PortalID = @PortalID) AND (Locale = @Locale) AND (Qualifier = @Qualifier) AND (StringKey = @StringKey))
            END
         ELSE
            /* -- This applies to 3. -- */
            SELECT @Count = COUNT(*) FROM {databaseOwner}{objectQualifier}helferlein_BabelFish WHERE ((PortalID = @PortalID) AND (Locale = @FallBackLocale) AND (Qualifier = @Qualifier) AND (StringKey = @StringKey))
            IF @Count > 0
               BEGIN
                  SELECT
                     PortalID,
                     ID,
                     @Locale AS Locale,
                     Qualifier,
                     StringKey,
                     '' AS StringText,
                     StringText AS FallBack
                  FROM
                     {databaseOwner}{objectQualifier}helferlein_BabelFish
                  WHERE
                     ((PortalID = @PortalID) AND (Locale = @FallBackLocale) AND (Qualifier = @Qualifier) AND (StringKey = @StringKey))
               END
      END
   END
GO

/*
Gets a String
*/
CREATE PROCEDURE {databaseOwner}{objectQualifier}helferlein_BabelFish_GetStringById
   @ID int
AS
   SELECT
      PortalID,
      ID,
      Locale,
      Qualifier,
      StringKey,
      StringText,
      StringText AS FallBack
   FROM
      {databaseOwner}{objectQualifier}helferlein_BabelFish
   WHERE
      (ID = @ID)

GO

/*
Gets all strings by a specified locale and qualifier
*/
CREATE PROCEDURE {databaseOwner}{objectQualifier}helferlein_BabelFish_GetStrings
   @PortalID int,
   @Locale nvarchar(5),
   @Qualifier nvarchar(100),
   @FallBackLocale nvarchar(5)
AS
   BEGIN
      IF (@Locale = @FallBackLocale)
         BEGIN
            SELECT
               PortalID,
               ID,
               Locale,
               Qualifier,
               StringKey,
               StringText,
               StringText AS FallBack
            FROM
               {databaseOwner}{objectQualifier}helferlein_BabelFish
            WHERE
               ((PortalID = @PortalID) AND (Locale = @Locale) AND (Qualifier = @Qualifier))
         END
      ELSE
         BEGIN
            CREATE TABLE #{objectQualifier}TempFish
            (
               PortalID int,
               ID int,
               Locale nvarchar(5),
               Qualifier nvarchar(100),
               StringKey nvarchar(36),
               StringText nvarchar(max),
               FallBack nvarchar(max)
            )
		      INSERT INTO #{objectQualifier}TempFish(PortalID, ID, Locale, Qualifier , StringKey, StringText, FallBack)
            SELECT
               PortalID,
               ID,
               Locale,
               Qualifier,
               StringKey,
               StringText,
               (SELECT StringText FROM {databaseOwner}{objectQualifier}helferlein_BabelFish AS {objectQualifier}helferlein_BabelFish_FallBack WHERE(({objectQualifier}helferlein_BabelFish_FallBack.PortalID = {objectQualifier}helferlein_BabelFish.PortalID) AND ({objectQualifier}helferlein_BabelFish_FallBack.Qualifier = {objectQualifier}helferlein_BabelFish.Qualifier) AND ({objectQualifier}helferlein_BabelFish_FallBack.StringKey = {objectQualifier}helferlein_BabelFish.StringKey) AND ({objectQualifier}helferlein_BabelFish_FallBack.Locale = @FallBackLocale))) AS FallBack
            FROM {databaseOwner}{objectQualifier}helferlein_BabelFish
            WHERE ((PortalID = @PortalID) AND (Locale = @Locale) AND (Qualifier = @Qualifier))
            INSERT INTO #{objectQualifier}TempFish(PortalID, ID, Locale, Qualifier, StringKey, StringText, FallBack)
            SELECT
               PortalID,
               ID,
               @Locale AS Locale,
               Qualifier,
               StringKey,
               '' AS StringText,
               StringText AS FallBack
            FROM {databaseOwner}{objectQualifier}helferlein_BabelFish
            WHERE ((Locale = @FallBackLocale) AND (Qualifier = @Qualifier) AND (StringKey NOT IN (SELECT StringKey FROM {databaseOwner}{objectQualifier}helferlein_BabelFish WHERE ((Locale = @Locale) AND (Qualifier = @Qualifier)))))
            Select * From #{objectQualifier}TempFish
         END
   END
GO

/*
Gets all strings by a specified qualifier
*/
CREATE PROCEDURE {databaseOwner}{objectQualifier}helferlein_BabelFish_GetStringsByQualifier
   @PortalID int,
   @Qualifier nvarchar(100),
   @FallBackLocale nvarchar(5)
AS
   BEGIN
      SELECT
         PortalID,
         ID,
         Locale,
         Qualifier,
         StringKey,
         StringText,
         (SELECT StringText FROM {databaseOwner}{objectQualifier}helferlein_BabelFish AS {objectQualifier}helferlein_BabelFish_FallBack WHERE(({objectQualifier}helferlein_BabelFish_FallBack.PortalID = {objectQualifier}helferlein_BabelFish.PortalID) AND ({objectQualifier}helferlein_BabelFish_FallBack.Qualifier = {objectQualifier}helferlein_BabelFish.Qualifier) AND ({objectQualifier}helferlein_BabelFish_FallBack.StringKey = {objectQualifier}helferlein_BabelFish.StringKey) AND ({objectQualifier}helferlein_BabelFish_FallBack.Locale = @FallBackLocale))) AS FallBack
      FROM {databaseOwner}{objectQualifier}helferlein_BabelFish
      WHERE ((PortalID = @PortalID) AND (Qualifier = @Qualifier))
   END
GO

/*
Gets all strings by a specified qualifier and StringKey
*/
CREATE PROCEDURE {databaseOwner}{objectQualifier}helferlein_BabelFish_GetStringsByQualifierAndStringKey
   @PortalID int,
   @Qualifier nvarchar(100),
   @StringKey nvarchar(36),
   @FallBackLocale nvarchar(5)
AS
   BEGIN
      SELECT
         PortalID,
         ID,
         Locale,
         Qualifier,
         StringKey,
         StringText,
         (SELECT StringText FROM {databaseOwner}{objectQualifier}helferlein_BabelFish AS {objectQualifier}helferlein_BabelFish_FallBack WHERE(({objectQualifier}helferlein_BabelFish_FallBack.PortalID = {objectQualifier}helferlein_BabelFish.PortalID) AND ({objectQualifier}helferlein_BabelFish_FallBack.Qualifier = {objectQualifier}helferlein_BabelFish.Qualifier) AND ({objectQualifier}helferlein_BabelFish_FallBack.StringKey = {objectQualifier}helferlein_BabelFish.StringKey) AND ({objectQualifier}helferlein_BabelFish_FallBack.Locale = @FallBackLocale))) AS FallBack
      FROM {databaseOwner}{objectQualifier}helferlein_BabelFish
      WHERE ((PortalID = @PortalID) AND (Qualifier = @Qualifier) AND (StringKey = @StringKey))
   END

GO

/*
Inserts a String
*/
CREATE PROCEDURE {databaseOwner}{objectQualifier}helferlein_BabelFish_InsertString
   @PortalID int,
   @Locale nvarchar(5),
   @Qualifier nvarchar(100),
   @StringKey nvarchar(36),
   @StringText nvarchar(max)
AS
   BEGIN
      INSERT INTO {databaseOwner}{objectQualifier}helferlein_BabelFish(
         PortalID,
         Locale,
         Qualifier,
         StringKey,
         StringText)
      VALUES(
         @PortalID,
         @Locale,
         @Qualifier,
         @StringKey,
         @StringText);
      SELECT SCOPE_IDENTITY()
   END
GO

/*
Updates a String by a specified locale, qualifier and key
*/
CREATE PROCEDURE {databaseOwner}{objectQualifier}helferlein_BabelFish_UpdateString
   @PortalID int,
   @Locale nvarchar(5),
   @Qualifier nvarchar(100),
   @StringKey nvarchar(36),
   @StringText nvarchar(max)
AS
   BEGIN
      DECLARE @Count int
      SELECT @Count = COUNT(*) FROM {databaseOwner}{objectQualifier}helferlein_BabelFish WHERE ((PortalID = @PortalID) AND (Locale = @Locale) AND (Qualifier = @Qualifier) AND (StringKey = @StringKey))
      IF @Count > 0
         BEGIN
            UPDATE
               {databaseOwner}{objectQualifier}helferlein_BabelFish
            SET
               StringText = @StringText
            WHERE
               ((PortalID = @PortalID) AND (Locale = @Locale) AND (Qualifier = @Qualifier) AND (StringKey = @StringKey))
            SELECT
               ID
            FROM
               {databaseOwner}{objectQualifier}helferlein_BabelFish
            WHERE
               ((PortalID = @PortalID) AND (Locale = @Locale) AND (Qualifier = @Qualifier) AND (StringKey = @StringKey))
         END
      ELSE
         BEGIN
            EXECUTE {databaseOwner}{objectQualifier}helferlein_BabelFish_InsertString @PortalID, @Locale, @Qualifier, @StringKey, @StringText
         END
   END
GO

/*
Updates a string
*/
CREATE PROCEDURE {databaseOwner}{objectQualifier}helferlein_BabelFish_UpdateStringById
	@ID int,
	@StringText as nvarchar(max)
AS
   BEGIN
      UPDATE
         {databaseOwner}{objectQualifier}helferlein_BabelFish
      SET
         StringText = @StringText
      WHERE
         (ID = @ID)
   END
GO

/*
Inserts/Updates a String Collection
*/
CREATE PROCEDURE {databaseOwner}{objectQualifier}helferlein_BabelFish_UpdateStrings
   @Aquarium xml
AS
   BEGIN
      BEGIN TRY
         BEGIN TRANSACTION
            DECLARE @idoc int
            DECLARE @PortalID int
            DECLARE @Locale nvarchar(5)
            DECLARE @Qualifier nvarchar(100)
            DECLARE @StringKey nvarchar(36)
            DECLARE @StringText nvarchar(max)

            EXEC sp_xml_preparedocument @idoc OUTPUT, @Aquarium
            DECLARE aquarium CURSOR FOR (SELECT * FROM OPENXML(@idoc, '/Aquarium/BabelFish') WITH (PortalID int 'PortalID', Locale nvarchar(5) 'Locale', Qualifier nvarchar(100) 'Qualifier', StringKey nvarchar(36) 'StringKey', StringText nvarchar(max) 'StringText'))
            OPEN aquarium
            FETCH NEXT FROM aquarium INTO @PortalID, @Locale, @Qualifier, @StringKey, @StringText
            WHILE (@@FETCH_STATUS = 0)
               BEGIN
                  IF @StringText <> ''
                     BEGIN
                        EXEC {databaseOwner}{objectQualifier}helferlein_BabelFish_UpdateString @PortalID, @Locale, @Qualifier, @StringKey, @StringText
                     END
                  ELSE
                     BEGIN
                        EXEC {databaseOwner}{objectQualifier}helferlein_BabelFish_DeleteStringKeyByLocale @PortalID, @Locale, @Qualifier, @StringKey
                     END
                  FETCH NEXT FROM aquarium INTO @PortalID, @Locale, @Qualifier, @StringKey, @StringText
               END
            CLOSE aquarium
            DEALLOCATE aquarium
         COMMIT TRANSACTION
      END TRY
      BEGIN CATCH
         ROLLBACK TRANSACTION
         DECLARE @ErrMsg nvarchar(4000)
         DECLARE @ErrSeverity int
         SELECT @ErrMsg = ERROR_MESSAGE(), @ErrSeverity = ERROR_SEVERITY()
         RAISERROR(@ErrMsg, @ErrSeverity, 1)
      END CATCH
   END
GO

